What will you do?

We will work on [AIRduct](https://squera.github.io/fcs-pdf/dingFCS2023.pdf), the array-based IR for the [Viaduct](https://www.cs.cornell.edu/andru/papers/viaduct/viaduct-tr.pdf) compiler.
This is a research project that Vivian has been working on for the last couple of years.

TODO: Regurgitate info about Viaduct and AIRduct


Now, we are focusing on implementing the following:
- Control flow
- A grouping procedure for creating circuit blocks in the IR from programs in which each statement is annotated with
a protocol. This will include reordering of code.
- Optimizations such as vectorization

How will you do it?

- Control flow should hopefully be straightforward.
- Grouping requires some thinking about what reorderings are safe with respect to both data dependencies and security.
- Optimizations will be nontrivial but based on prior work.
    - One optimization is simply calling into SIMD instructions which are natively supported by many cryptographic
    libaries.
    - A more interesting one is combining bulk instructions, such as merging two array map expressions into one when the
    second map operates on the output of the first one.

How will you empirically measure success?

- We will measure success of implementing control flow by seeing that it works. There will be test cases.
- We are not confident how to measure success of grouping yet. A good metric for the quality of a grouping might be the
resulting number of blocks, but it's not obvious whether one can compute the minimal number of blocks to compare our
implementation to. There doesn't exist a unique maximal grouping, but there definitely exists some set of maximal
groupings for any given program.




TODO Vivian: Read my notebook notes and regurgitate more information here

A major part of your project is an empirical evaluation. To design your evaluation strategy, you will need to consider
at least these things:

Where will you get the input code you’ll use in your evaluation?
How will you check the correctness of your implementation? If you’ve implemented an optimization, for example,
“correctness” means that the transformed programs behave the same way as the original programs.
How will you measure the benefit (in performance, energy, complexity, etc.) of your implementation?
How will you present the data you collect from your empirical evaluation?
Other questions may be relevant depending on the project you choose. Consider the SIGPLAN empirical evaluation
guidelines when you design your methodology.
